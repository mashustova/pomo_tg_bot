import datetime
import json
from utils.datetime_utils import format_datetime


async def parse_gpt_response_event(response):
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è.
    """
    try:
        parsed_data = json.loads(response)  # GPT –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON
        required_keys = ["summary", "start", "end"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        for key in required_keys:
            if key not in parsed_data or not parsed_data[key]:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {key}")

        return parsed_data
    except json.JSONDecodeError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")


async def generate_user_message_event(event_data):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è.
    """
    summary = event_data.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    start = event_data.get("start", {}).get("dateTime", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    end = event_data.get("end", {}).get("dateTime", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    start_formatted = format_datetime(start) if start != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else start
    end_formatted = format_datetime(end) if end != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else end

    if start == "–ù–µ —É–∫–∞–∑–∞–Ω–æ" or end == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        return f"–î–ª—è —Å–æ–±—ã—Ç–∏—è '{summary}' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."

    return (
        f"üéâ –°–æ–±—ã—Ç–∏–µ: '{summary}'\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: —Å {start_formatted} –¥–æ {end_formatted}.\n\n"
        f"üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."
    )
